<html>
<head>
    <script type="text/javascript" src="scripts/common-0.0.1.js"></script>
</head>
<style>
    body {
      font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
      background-color: #036;      
    }
    #routePlusUser {
      width: 90%;
      height: 90%;
      background-color: white;
      margin-top: 50px;
      margin-left: 25px;
      margin-right: 25px;
      padding: 25px;
    }
    #allContainer {
      width: 35%;
      height: 100%;
      float: left;
    }
    #selectedContainer {
      width: 60%;
      max-width: 500px;
      height: 100%;
      float: left;
    }
    #nodeTbl, #nodeSelTbl {
        font-size: smaller;
        width: 100%;
    }
    #nodeTbl td, #nodeSelTbl td {
        padding-left: 5px;
        padding-right: 5px;
    }
    .nodeRow, .selRow {
        height: 36px;
        max-height: 40px;
        width: 100%;
    }
    .nIcon {
      width:16px;
      margin-top:1px;
      margin-left:2px;
      height:16px;
      display: inline-block;
      margin-right: 10px;
    }
    .j1 {
        background: url(../images/icons16.png) 0px 0px;
        height: 16px;
        width: 16px;
        border: none;
    }
    .j2 {
        background: url(../images/icons16.png) -16px 0px;
        height: 16px;
        width: 16px;
        border: none;
    }
    .j3 {
        background: url(../images/icons16.png) -32px 0px;
        height: 16px;
        width: 16px;
        border: none;
    }
    .j4 {
        background: url(../images/icons16.png) -48px 0px;
        height: 16px;
        width: 16px;
        border: none;
    }
    .j5 {
        background: url(../images/icons16.png) -64px 0px;
        height: 16px;
        width: 16px;
        border: none;
    }
    .j6 {
        background: url(../images/icons16.png) -80px 0px;
        height: 16px;
        width: 16px;
        border: none;
    }
    .ftype {
        font-size: small;
    }
    .protoSel {
        width: 100px;
    }
    .addMap, .removeMap, .setMine {
        cursor: pointer;
    }
    .header {
        font-weight: bold;
        display: block;
    }
    .iheader {
        font-weight: bold;
    }
    #myCompC {
        padding: 30px;
    }
    .otherInp {
        width: 50px;
    }
</style>
<body onload="doOnLoad();">
<div id="routePlusUser">
    <h1>RoutePlus Settings</h1>
    <div><button onclick="goCancel();">Go Back</button></div>
    <div id="myCompC">
        <span class="iheader">My Computer:</span> 
        <span id="myComp"></span> 
        <!-- span id="magicPortC"><label><input type="checkbox" onchange="magicChange();"> Magic Port</label></span -->
    </div>
    <div id="allContainer">
        <span class="header">Node Selection</span>
        <table id="nodeTbl">
            <tr><th>Set as Mine</th><th>Node</th><th>Protocol</th><th>Port</th><th>Add</th></tr>
        </table>
    </div>
    <div id="selectedContainer">
      <span class="header">Active Mappings</span>
      <table id="nodeSelTbl">
          <tr><th>Node</th><th>Protocol</th><th>Dest Port</th><th>Source Port</th><th>Remove</th></tr>
      </table>
    </div>
</div>
</body>
<script type="text/javascript">
var mappings = {{{mappings}}};
var myComputer = {{{myComputer}}};
var protoMap = {
    80: 'HTTP',
    443: 'HTTPS',
    3389: 'RDP',
    22: 'SSH'
}
var protoOpts = '<option value=""> - Protocol</option>';
for (const [p, v] of Object.entries(protoMap)) {
    protoOpts += '<option value="' + p + '">' + v + '</option>';
}
protoOpts += '<option value="other">Other</option>';
var nodeMap = {};

function doOnLoad() {
    try { 
        if (nodes == null) { 
            alert('Page reloaded and data lost.');
            goCancel();
            return;
        }
    } catch (e) {
        alert('Page reloaded and data lost.');
        goCancel();
        return;
    }
    nodes.forEach(function(n) {
        nodeMap[n._id] = n;
    });
    updateNodesTable();
    updateSelTable();
    updateMyComputer();
}
function goCancel() {
    window.close();
}
function loadMyComputer(msg) {
    myComputer = msg.data;
    updateMyComputer();
}
function updateMyComputer() {
    var holder = Q('myComp');
    var s = '';
    if (myComputer != null) {
        s = `<div class="nIcon j${nodeMap[myComputer.node].icon}"></div>${nodeMap[myComputer.node].name}`;
    } else {
        s = '<span>None selected.</span>';
    }
    holder.innerHTML = s;
}
function setMyComputer(el) {
    var row = el.parentNode.parentNode, 
        port = row.querySelectorAll('.otherInp')[0], 
        proto = row.querySelectorAll('.protoSel')[0],
        nodeId = row.getAttribute('x-data-id');
    window.opener.pluginHandler.routeplus.setMyComputer( { node: nodeId } );
}
function addMap(el) {
    if (myComputer == null) {
        alert("You must first set a computer as your own before adding a map.");
        return;
    }
    var row = el.parentNode.parentNode, 
        port = row.querySelectorAll('.otherInp')[0], 
        proto = row.querySelectorAll('.protoSel')[0],
        nodeId = row.getAttribute('x-data-id');
    window.opener.pluginHandler.routeplus.addMap( { toNode: nodeId, port: port.value } );
}
function removeMap(el) {
    var row = el.parentNode.parentNode, 
        nodeId = row.getAttribute('x-data-id');
    window.opener.pluginHandler.routeplus.removeMap( nodeId );
}
function loadMappings(msg) {
    mappings = msg.data;
    updateSelTable();
}
function protoChange(el) {
    var row = el.parentNode.parentNode,
        port = row.querySelectorAll('.otherInp')[0];
    if (el.value == 'other') {
        port.disabled = false;
        port.value = '';
    } else {
        port.disabled = true;
        port.value = el.value;
    }
}
function updateNodesTable() {
  let dRows = document.querySelectorAll('.nodeRow');
  dRows.forEach((r) => {
      r.parentNode.removeChild(r);
  });
  
  var nodeTbl = document.querySelector('#nodeTbl');
  nodes.forEach(function(i) {
      var item = {...i, ...{}};
      if (item.mtype == 2) {
          item.meshName = meshes[item['meshid']].name;
          let tpl = `<td><a class="setMine" onclick="setMyComputer(this);">Set</td>
            <td><div class="nIcon j${item.icon}"></div>${item.name}</td>
            <td><select onchange="protoChange(this);" class="protoSel">
                ${protoOpts}
            </select></td>
            <td><input class="otherInp" type="text" value="" disabled></td>
            <td><a class="addMap" onclick="addMap(this);">Add</td>`;
          let tr = nodeTbl.insertRow(-1);
          tr.innerHTML = tpl;
          tr.setAttribute('x-data-id', item._id);
          tr.classList.add('nodeRow');
      }
  });
}
function updateSelTable() {
  let dRows = document.querySelectorAll('.selRow');
  dRows.forEach((r) => {
      r.parentNode.removeChild(r);
  });
  
  var selTbl = document.querySelector('#nodeSelTbl');
  if (mappings != null && mappings.length) {
      mappings.forEach(function(i) {
          var item = {...i, ...{}};
          item.protoTxt = protoMap[item.port];
          if (item.protoTxt == 'undefined' || item.protoTxt == null) item.protoTxt = 'Custom';
          let tpl = `<td><div class="nIcon j${nodeMap[item.toNode].icon}"></div>${nodeMap[item.toNode].name}</td>
            <td>${item.protoTxt}</td>
            <td>${item.port}</td>
            <td>${item.localport}</td>
            <td><a class="removeMap" onclick="removeMap(this);">Remove</td>`;
          let tr = selTbl.insertRow(-1);
          tr.innerHTML = tpl;
          tr.setAttribute('x-data-id', item._id);
          tr.classList.add('selRow');
      });
    }
}
</script>
</html>